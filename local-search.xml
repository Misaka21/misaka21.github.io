<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>123</title>
    <link href="/2023/123/"/>
    <url>/2023/123/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023电赛回顾</title>
    <link href="/2023/2023%E7%94%B5%E8%B5%9B%E5%9B%9E%E9%A1%BE/"/>
    <url>/2023/2023%E7%94%B5%E8%B5%9B%E5%9B%9E%E9%A1%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>记录</category>
      
    </categories>
    
    
    <tags>
      
      <tag>STM32</tag>
      
      <tag>比赛</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目二总结</title>
    <link href="/2023/%E9%A1%B9%E7%9B%AE%E4%BA%8C%E6%80%BB%E7%BB%93/"/>
    <url>/2023/%E9%A1%B9%E7%9B%AE%E4%BA%8C%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TX2刷机</title>
    <link href="/2023/TX2%E5%88%B7%E6%9C%BA/"/>
    <url>/2023/TX2%E5%88%B7%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<p>在学院的项目二中用到了这块Nvidia Jetson TX2开发板，在查阅完无数号称『亲自实践』的低质资料，踩过了无数坑。故作此文章，给自己后续刷机留个文档，也给后人留个教程</p><span id="more"></span><h2 id="零、刷机准备"><a href="#零、刷机准备" class="headerlink" title="零、刷机准备"></a>零、刷机准备</h2><blockquote><ul><li><p>Ubuntu 18.04的虚拟机</p></li><li><p>NVIDIA SDK Manager</p></li><li><p>micro USB数据线(非充电线)</p></li><li><p><em>两根RJ45网线(可选)</em></p></li><li><p><em>路由器(可选)</em></p></li></ul></blockquote><h2 id="一、安装SDK-Manager"><a href="#一、安装SDK-Manager" class="headerlink" title="一、安装SDK Manager"></a>一、安装SDK Manager</h2><ol><li><p>刷机前需要准备一台<strong>装有ubuntu18.04的虚拟机</strong>，版本不能超过18.04，否则无法安装。虚拟机需要连网和至少20GB的磁盘空间。建议分配100GB。</p></li><li><p>在这台主机上下载SDK Manager，下载链接在<a href="https://developer.nvidia.cn/sdk-manager">这里</a>，选择Ubuntu的.deb下载。Docker的我没试过，有兴趣的可以试一下，有空开个坑讲讲Docker。</p></li></ol><p>下载好后在同一文件夹下打开终端，输入<code>sudo dpkg -i 软件包名.deb</code>,如：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo dpkg -i sdkmanager_1.9.2-10884_amd64.deb<br></code></pre></td></tr></table></figure><p>* 输入密码时没有显示，直接回车就行。</p><p>安装完虚拟机之后，你需要下载 SDKManager 的deb文件进行安装。如果你是新建的虚拟机直接安装 SDKManager ，你会遇到形如以下的报错，根据提示安装所需的依赖库。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs sh">huo@ubuntu:~/Downloads$ sudo dpkg -i sdkmanager_1.6.1-8175_amd64.deb <br>[sudo] password <span class="hljs-keyword">for</span> huo: <br>Selecting previously unselected package sdkmanager. <br>(Reading database ... 151187 files and directories currently installed.) <br>Preparing to unpack sdkmanager_1.6.1-8175_amd64.deb ... <br>Unpacking sdkmanager (1.6.1-8175) ... <br>dpkg: dependency problems prevent configuration of sdkmanager: <br> sdkmanager depends on libgconf-2-4; however: <br>  Package libgconf-2-4 is not installed. <br> sdkmanager depends on libcanberra-gtk-module; however: <br>  Package libcanberra-gtk-module is not installed. <br>dpkg: error processing package sdkmanager (--install): <br>dependency problems - leaving unconfigured <br>Processing triggers <span class="hljs-keyword">for</span> gnome-menus (3.13.3-11ubuntu1.1) ... <br>Processing triggers <span class="hljs-keyword">for</span> desktop-file-utils (0.23-1ubuntu3.18.04.2) ... <br>Processing triggers <span class="hljs-keyword">for</span> mime-support (3.60ubuntu1) ... <br>Processing triggers <span class="hljs-keyword">for</span> hicolor-icon-theme (0.17-2) ... <br>Errors were encountered <span class="hljs-keyword">while</span> processing: <br>sdkmanager<br></code></pre></td></tr></table></figure><p>输入以下指令修复缺失的依赖库：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt --fix-broken install<br></code></pre></td></tr></table></figure><p>再次安装SDKManager deb文件。</p><ol start="3"><li>安装好后打开，需要自己去官网注册一个账号，注册一个就行了。用micro USB线连接TX2，可能会弹下面这个框</li></ol><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20230805181713316.png"></p><p>如果没有，在虚拟机-&gt;可移动设备-&gt;NVIDIA Linux for Tegra-&gt;点击断开与主机的连接</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20230805181937157.png"></p><h2 id="二、安装系统"><a href="#二、安装系统" class="headerlink" title="二、安装系统"></a>二、安装系统</h2><p>一切准备就绪，打开后将会看到大概这样的界面，选择你想选择的，Host Machine 不需要点(这将不会在你的虚拟机上安装cuda，反正安装也会报错)，DeepL可以不装。</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20230805182204019.png"></p><p>接着</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231027191102553.png"></p><p>等待下载完成，就可以开始安装了</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106142633009.png" alt="image-20231106142633009"></p><p>选择Manual Setup，输入想要给tx2设置的用户名密码，密码越简单越好，最好也别有数字。</p><p>TX2进入刷机模式的方法是：一直按着Recovery按钮，然后点按一下Reset，松开Recovery按钮。</p><p>接着虚拟机可能问你将usb连接到哪里，迅速选择连接到Ubuntu，接着就可以点击Flash进行刷机了</p><p>但是有的TX在安装之后会出现error,并且报的是如下<code>UTF8 codec can&#39;t..</code>的错误后，说明你TX需要用命令行刷机。</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106134539141.png" alt="image-20231106134539141"></p><p>找到之前下载的目录，我的是</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">huo@ubuntu:~/nvidia/nvidia_sdk/JetPack_4.6.4_Linux_JETSON_TX2_TARGETS/Linux_for_Tegra$ <br></code></pre></td></tr></table></figure><p>接着在该文件夹中打开终端，输入命令开始刷机:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo ./flash.sh jetson-tx2 mmcblk0p1<br></code></pre></td></tr></table></figure><h2 id="三、安装CUDA-TensorRT等SDK"><a href="#三、安装CUDA-TensorRT等SDK" class="headerlink" title="三、安装CUDA,TensorRT等SDK"></a>三、安装CUDA,TensorRT等SDK</h2><p>如果用刷机软件完成第二步后，不要进入下一步</p><p>如果是用命令刷完后，先按reset键重启TX2，再连接显示器，设置用户名密码，进入桌面。</p><p>接着重新打开sdkmanager，在这个页面点击skip</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106140523563.png" alt="image-20231106140523563"></p><p>接着，不管是用SDKManager还是用命令刷机，都应该看到这个页面：</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106140850286.png" alt="image-20231106140850286"></p><p>这边选择usb，ip填写tx2的ip，如何填写请参考下文。</p><p>username和password填写给TX2设置的用户名密码。</p><p>当然也可能出现这个问题：</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106142348120.png" alt="image-20231106142348120"></p><p>打开命令行，输入：</p><p>等待进度条跑满，结束。</p><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><p>tx2需要和虚拟机连在同一个网络内，目前试下来比较好的方法是：虚拟机开启桥接模式，tx2通过网线连接虚拟机。</p><p>其中，虚拟机查看ip的方法为命令行中输入<code>ifconfig</code>,<code>Eth0</code>中的ip就是tx的ip</p><p><img src="/./TX2%E5%88%B7%E6%9C%BA/image-20231106141732873.png" alt="image-20231106141732873"></p><h2 id="附录一、安装opencv-c-环境"><a href="#附录一、安装opencv-c-环境" class="headerlink" title="附录一、安装opencv c++环境"></a>附录一、安装opencv c++环境</h2><h2 id="附录二、配置工业相机"><a href="#附录二、配置工业相机" class="headerlink" title="附录二、配置工业相机"></a>附录二、配置工业相机</h2><h2 id="附录三、配置串口通信"><a href="#附录三、配置串口通信" class="headerlink" title="附录三、配置串口通信"></a>附录三、配置串口通信</h2><h2 id="附录四、设置开机自启动"><a href="#附录四、设置开机自启动" class="headerlink" title="附录四、设置开机自启动"></a>附录四、设置开机自启动</h2><p>当你需要开启TX2的时候就启动编写的代码，可以设置自启动程序。自启动程序一般是一个<code>.sh</code>文件，也就是脚本文件。</p><h3 id="1-下载expect工具"><a href="#1-下载expect工具" class="headerlink" title="1.下载expect工具"></a>1.下载expect工具</h3><p>我由于要打开串口，因此需要能够处理<code>sudo</code>命令，这里可以使用<code>expect</code>工具来自动输入密码，但要注意，这种做法可能存在安全隐患，因此不建议在不安全的电脑上使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh">sudo apt-get install expect<br></code></pre></td></tr></table></figure><h3 id="2-创建脚本文件"><a href="#2-创建脚本文件" class="headerlink" title="2.创建脚本文件"></a>2.创建脚本文件</h3><p>新建一个自启动文件<code>start.sh</code>，放在home目录下，我新建的脚本内容如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-meta">#!/bin/bash</span><br><br><span class="hljs-comment"># 使用expect工具执行需要密码的命令</span><br>/usr/bin/expect &lt;&lt;<span class="hljs-string">EOD</span><br><span class="hljs-string">spawn sudo chmod 777 /dev/ttyTHS2</span><br><span class="hljs-string">expect &quot;password:&quot;</span><br><span class="hljs-string">send &quot;密码密码密码\r&quot;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOD</span><br><br><span class="hljs-comment"># 运行haha.py</span><br>python3 /home/huo/Desktop/yolov5-master/haha.py<br></code></pre></td></tr></table></figure><p>**#!**是一个特殊标记，说明这是一个可执行的脚本。除了第一行，其他以#开头的都不再生效，为注释。</p><p>#!后面是脚本的解释器程序路径。这个程序可以是shell，程序语言或者其他通用程序，常用的是bash，sh。</p><p><code>&lt;&lt;EOD</code> 是在 shell 脚本中使用的一种称为 “here document” 或 “heredoc” 的技术。这是一种在命令行和脚本中嵌入一个多行字符串的方法。<code>EOD</code> 只是一个标识符，您可以使用其他任何单词来代替，只要开头和结尾的标识符匹配即可。</p><p><code>&lt;&lt;EOD</code> 告诉 shell，直到它再次遇到单独的 <code>EOD</code>（或您选择的任何其他标识符）为止，所有接下来的行都应该被读取并发送到前面的命令作为输入。</p><p>例如，在使用 <code>expect</code> 工具时，您可能会这样写：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">/usr/bin/expect &lt;&lt;<span class="hljs-string">EOD</span><br><span class="hljs-string">spawn sudo some_command</span><br><span class="hljs-string">expect &quot;password:&quot;</span><br><span class="hljs-string">send &quot;mypassword\r&quot;</span><br><span class="hljs-string">expect eof</span><br><span class="hljs-string">EOD</span><br></code></pre></td></tr></table></figure><p>上述脚本中：</p><ol><li>用 <code>spawn</code> 开始一个 <code>sudo some_command</code> 进程。</li><li>然后，它等待看到 “password:” 提示。</li><li>一旦看到该提示，它发送 “mypassword” 以及一个回车（<code>\r</code>）。</li><li>最后，它等待命令结束。</li></ol><p>这里的 <code>EOD</code> 只是一个常用的标识符，您可以替换为其他任何词，例如 <code>&lt;&lt;ENDTEXT</code> 和 <code>ENDTEXT</code> 或 <code>&lt;&lt;ANYTHING</code> 和 <code>ANYTHING</code>，关键是开始和结束的标识符必须匹配。</p><h3 id="3-为脚本添加执行权限："><a href="#3-为脚本添加执行权限：" class="headerlink" title="3.为脚本添加执行权限："></a>3.为脚本添加执行权限：</h3><p>在终端中输入命令：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sh"><span class="hljs-built_in">chmod</span> +x start.sh<br></code></pre></td></tr></table></figure><p>​<code>chmod</code> 是一个 Unix 和 Linux 系统中用于更改文件或目录权限的命令。<code>chmod +x</code> 用于给文件增加“执行”权限。</p><p>具体来说：</p><ul><li><code>chmod</code> 代表 “change mode”，用于设置文件或目录的权限。</li><li><code>+</code> 代表增加权限。</li><li><code>x</code> 代表“执行”权限。</li></ul><p>当您使用 <code>chmod +x</code> 命令并跟上一个文件名，例如 <code>chmod +x filename.sh</code>，您就为该文件赋予了执行权限。这意味着该文件（通常是一个脚本或可执行程序）现在可以被用户直接运行。</p><p>例如，对于一个名为 <code>script.sh</code> 的 bash 脚本，如果您想让其具有执行权限，您可以使用以下命令：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">bashCopy code<br>chmod +x <span class="hljs-keyword">script</span>.sh<br></code></pre></td></tr></table></figure><p>之后，您可以使用 <code>./script.sh</code> 命令直接运行该脚本。</p><p>为文件添加执行权限是确保该文件可以被执行的常见步骤，特别是在下载或创建新的脚本文件后。</p><h3 id="4-将脚本设为开机自启动"><a href="#4-将脚本设为开机自启动" class="headerlink" title="4.将脚本设为开机自启动"></a>4.将脚本设为开机自启动</h3><p>4.打开终端，在终端中执行<code>gnome-session-properties</code>,会弹出一个“启动应用程序首选项”的菜单,点击添加。其中，Name和Comment根据自己的实际情况填写，Command中填写开机时需要运行的文件位置，在这里我们输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">gnome-terminal -x /home/huo/start.sh# 开机启动start.sh文件<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目课</tag>
      
      <tag>TX2</tag>
      
      <tag>视觉</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单片机编程规范</title>
    <link href="/2023/STM32_Programming_Guidelines/"/>
    <url>/2023/STM32_Programming_Guidelines/</url>
    
    <content type="html"><![CDATA[<blockquote><p>刚开始学STM32的时候，看到一些比较规范的代码中的一些变量命名为<code>ucValue</code> 、<code>g_ucPara</code>等形式，当时觉得好不习惯，为什么要加<code>uc</code>、<code>g_uc</code>等，感觉好难看，后来才知道，这些前缀都有其约定俗成的意思，可以方便的知道变量的数据类型。</p><span id="more"></span><p>如：<code>uc</code>代表的是<code>unsigned char</code>，所以一个变量命名为<code>ucValue</code>就可以清楚的表明其为<code>unsigned char</code>的变量 。同样的，<code>g</code>代表<code>global</code>，即<code>全局的</code>，<code>g_ucPara</code>表明其为<code>unsigned char</code>类型的全局变量。</p></blockquote><p>现在我们来看网上的一些比较权威的编码规范，比如安富莱的编码规范：</p><h2 id="1、文件与目录"><a href="#1、文件与目录" class="headerlink" title="1、文件与目录"></a>1、文件与目录</h2><p><strong>（1）文件的命名</strong></p><p>文件的命名要准确清晰地表达其内容，同时文件名应该精练，防止文件名过长而造成使用不便。在文件名中可以适当地使用缩写。 以下提供两种命名方式以供参考：</p><ul><li><p>各程序模块的文件命名开头 2 个小写字母代表本模块的功能：</p><p>如：主控程序为 <code>mpMain.c</code>，<code>mpDisp.c</code> 等。</p></li><li><p>不写模块功能标识：<br>如：主控程序为 <code>Main.c</code>，<code>Disp.c</code> 等。</p></li></ul><p><strong>（2）头文件中段落安排顺序</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// 1、文件头注释</span><br><span class="hljs-comment">// 2、防止重复引用头文件的设置</span><br><span class="hljs-comment">// 3、#include 部分</span><br><span class="hljs-comment">// 4、enum 常量声明</span><br><span class="hljs-comment">// 5、类型声明和定义，包括 struct、union、typedef 等</span><br><span class="hljs-comment">// 6、全局变量声明</span><br><span class="hljs-comment">// 7、文件级变量声明</span><br><span class="hljs-comment">// 8、全局或文件级函数声明</span><br><span class="hljs-comment">// 9、函数实现。按函数声明的顺序排列</span><br><span class="hljs-comment">// 10、文件尾注释</span><br></code></pre></td></tr></table></figure><p><strong>（3）在引用头文件时，不要使用绝对路径</strong></p><p>如果使用绝对路径，当需要移动目录时，必须修改所有相关代码，繁琐且不安全；使用相对路径，当需要移动目录时，只需修改编译器的某个选项即可。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> “/project/inc/hello.h” <span class="hljs-comment">/* 不应使用绝对路径 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> “../inc/hello.h”       <span class="hljs-comment">/* 可以使用相对路径 */</span></span><br></code></pre></td></tr></table></figure><p><strong>（4）在引用头文件时 ，使用&lt;&gt;还是””</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>      <span class="hljs-comment">/* 标准头文件 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;projdefs.h&gt;</span>   <span class="hljs-comment">/* 工程指定目录头文件 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> “global.h”     <span class="hljs-comment">/* 当前目录头文件 */</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> “inc/config.h” <span class="hljs-comment">/* 路径相对于当前目录的头文件 */</span></span><br></code></pre></td></tr></table></figure><p><strong>（5）防止头文件被重复引用</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __DISP_H <span class="hljs-comment">/* 文件名前名加两个下划线“__”，后面加 “_H”</span></span><br><span class="hljs-comment"><span class="hljs-meta">#define __DISP_H</span></span><br><span class="hljs-comment"><span class="hljs-meta">...</span></span><br><span class="hljs-comment"><span class="hljs-meta">...</span></span><br><span class="hljs-comment"><span class="hljs-meta">#endif</span></span><br></code></pre></td></tr></table></figure><p><strong>（6）头文件中只存放“声明”而不存放“定义”</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*模块1头文件：module1.h*/</span><br><span class="hljs-keyword">extern</span> <span class="hljs-type">int</span> a=<span class="hljs-number">5</span>;<span class="hljs-comment">/*在模块1的h文件中声明变量*/</span><br></code></pre></td></tr></table></figure><p><strong>（7）文件的长度</strong></p><p>文件的长度没有非常严格的要求，但应尽量避免文件过长。一般来说，文件长度应尽量保持在 1000 行之内 。</p><h2 id="2、排版"><a href="#2、排版" class="headerlink" title="2、排版"></a>2、排版</h2><p><strong>（1）程序块要采用缩进风格编写，缩进的空格数为 4 个。</strong></p><p><strong>（2）相对独立的程序块之间、变量说明之后必须加空行。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">DemoFunc</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">uint8_t</span> i;<br>    <span class="hljs-comment">//                &lt;-----局部变量和语句间空一行</span><br>    <span class="hljs-comment">/*功能块1*/</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        ...<br>    &#125;<br>    <span class="hljs-comment">//                &lt;-----不同的功能块间空一行</span><br>    <span class="hljs-comment">/*功能块2*/</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)<br>    &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3） 较长的语句或函数过程参数（&gt;80 字符）要分成多行书写，长表达式要在低优先级操作符处划分新行，操作符放在新行之首，划分出的新行要进行适当的缩进，使排版整齐，语句可读。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">if</span> ((ucParam1 == <span class="hljs-number">0</span>) &amp;&amp; (ucParam2 == <span class="hljs-number">0</span>) &amp;&amp; (ucParam3 == <span class="hljs-number">0</span>) <br>   || (ucParam4 == <span class="hljs-number">0</span>) || (ucParam5 == <span class="hljs-number">0</span>))<br></code></pre></td></tr></table></figure><p><strong>（4） 不允许把多个短语句写在一行中，即一行只写一条语句</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c++">rect.length = <span class="hljs-number">0</span>; rect.width = <span class="hljs-number">0</span>;<span class="hljs-comment">//不正确的写法</span><br><br>rect.length = <span class="hljs-number">0</span>;<br>rect.width = <span class="hljs-number">0</span>;<span class="hljs-comment">//正确的写法</span><br></code></pre></td></tr></table></figure><p><strong>（5）程序块的分界符（如大括号‘{’和‘}’ ）应各独占一行并且位于同一列</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbVFBSS5wbmc?x-oss-process=image/format,png" alt="eFmQAI.png"></p><p><strong>（6） 在两个以上的关键字、变量、常量进行对等操作时，它们之间的操作符之前、之后或者前后要加空格；进行非对等操作时，如果是关系密切的立即操作符（如－&gt;），后不应加空格。</strong></p><p>示例：</p><ul><li><strong>逗号、分号只在后面加空格。</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGblV4Ty5wbmc?x-oss-process=image/format,png" alt="eFnUxO.png"></p><ul><li><strong>比较操作符，赋值操作符”&#x3D;”、 “+&#x3D;”，算术操作符”+”、”%”，逻辑操作符”&amp;&amp;”、”&amp;”，位域操作符”&lt;&lt;”、”^”等双目操作符的前后加空格。</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGblBLZy5wbmc?x-oss-process=image/format,png" alt="eFnPKg.png"></p><ul><li><strong>“!”、”~”、”++”、”–”、”&amp;”（地址运算符）等单目操作符前后不加空格。</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbnV4VS5wbmc?x-oss-process=image/format,png" alt="eFnuxU.png"></p><ul><li><strong>“-&gt;”、”.”前后不加空格。</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbnRHNi5wbmc?x-oss-process=image/format,png" alt="eFntG6.png"></p><ul><li><strong>if、for、while、switch 等与后面的括号间应加空格，使 if 等关键字更为突出、明显，函数名与其后的括号之间不加空格，以与保留字区别开。</strong></li></ul><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbk5SSy5wbmc?x-oss-process=image/format,png" alt="eFnNRK.png"></p><h2 id="3、注释"><a href="#3、注释" class="headerlink" title="3、注释"></a>3、注释</h2><p><strong>（1） 一般情况下，源程序有效注释量必须在 20％以上。</strong></p><p>说明：注释的原则是有助于对程序的阅读理解，在该加的地方都加，注释不宜太多也不能太少，注释语言必须准确、易懂、简洁 。</p><p><strong>（2） 在文件的开始部分，应该给出关于文件版权、内容简介、修改历史等项目的说明。</strong></p><p>在创建代码和每次更新代码时，都必须在文件的历史记录中标注版本号、日期、作者、更改说明等项目。 下面是一个范例，当然，并不局限于此格式，但上述信息建议要包含在内。</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbjJ6OC5wbmc?x-oss-process=image/format,png" alt="eFn2z8.png"></p><p><strong>下面为一个可参考的模板：</strong></p><p>&#x3D;&#x3D;.c文件&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"> * Copyright (c) 2017, Jimbo Zhang </span><br><span class="hljs-comment"> * All rights reserved.</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * File name    :   USB_Ctrl.c</span><br><span class="hljs-comment"> * Brief        :   USB API source code.</span><br><span class="hljs-comment"> *               Introduce the main function or content of this document briefly.</span><br><span class="hljs-comment"> * Revision     :   1.01(每次修改完代码都要改)</span><br><span class="hljs-comment"> * Author       :   Jimbo Zhang</span><br><span class="hljs-comment"> * Date         :   2017.03.10(每次修改完代码都要改)</span><br><span class="hljs-comment"> * Update       :   Introduce the difference from previous version.(每次修改完代码都要改)</span><br><span class="hljs-comment">*************************************************************************/</span><br></code></pre></td></tr></table></figure><p>&#x3D;&#x3D;.h文件&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*************************************************************************</span><br><span class="hljs-comment"> - Copyright (c) 2017, Jimbo Zhang </span><br><span class="hljs-comment"> - All rights reserved.</span><br><span class="hljs-comment"> - </span><br><span class="hljs-comment"> - File name    :   USB_Ctrl.h</span><br><span class="hljs-comment"> - Brief        :   The header file of USB_Ctrl.c.</span><br><span class="hljs-comment"> - Revision     :   1.01(每次修改完代码都要改)</span><br><span class="hljs-comment"> - Author       :   Jimbo Zhang</span><br><span class="hljs-comment"> - Date         :   2017.03.10(每次修改完代码都要改)</span><br><span class="hljs-comment"> - Update       :   Introduce the difference from previous version.(每次修改完代码都要改)</span><br><span class="hljs-comment">*************************************************************************/</span><br></code></pre></td></tr></table></figure><p><strong>（3）对于函数，在函数实现之前，应该给出和函数的实现相关的足够而精练的注释信息。</strong></p><p><strong>示例：</strong></p><p>下面这段函数的注释比较标准，当然，并不局限于此格式，但上述信息建议要包含在内。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbkhKMC5wbmc?x-oss-process=image/format,png" alt="eFnHJ0.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/******************************************************</span><br><span class="hljs-comment">* Brief     : Delay n ms</span><br><span class="hljs-comment">* Parameter : </span><br><span class="hljs-comment">*           n: the number of delay microsecond.(变量的含义)</span><br><span class="hljs-comment">* Return    : None.</span><br><span class="hljs-comment">*******************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">delay</span><span class="hljs-params">( <span class="hljs-type">uint32_t</span> n)</span><br>&#123;<br>    <span class="hljs-keyword">for</span>( i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">110</span>; i++)<br>        ;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（4） 边写代码边注释，修改代码同时修改相应的注释，以保证注释与代码的一致性。不再有用的注释要删除。</strong><br><strong>（5） 注释的内容要清楚、明了，含义准确，防止注释二义性。</strong></p><p>说明：错误的注释不但无益反而有害。注释主要阐述代码做了什么（What），或者如果有必要的话，阐述<br>为什么要这么做（Why），注释并不是用来阐述它究竟是如何实现算法（How）的。</p><p><strong>（6） 避免在注释中使用缩写，特别是非常用缩写。</strong></p><p>说明：在使用缩写时或之前，应对缩写进行必要的说明。</p><p><strong>（7） 注释应与其描述的代码靠近，对代码的注释应放在其上方或右方（对单条语句的注释）相邻位置，<br>不可放在下面，如放于上方则需与其上面的代码用空行隔开。</strong></p><p>示例：如下例子不符合规范。</p><p><strong>例 1：不规范的写法</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGbnhlSi5wbmc?x-oss-process=image/format,png" alt="eFnxeJ.png"></p><p><strong>例 2：不规范的写法</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VGdVBXNi5wbmc?x-oss-process=image/format,png" alt="eFuPW6.png"></p><p><strong>例 3：规范的写法</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBUFB0VS5wbmc?x-oss-process=image/format,png" alt="eAPPtU.png"></p><p><strong>例 4：不规范的写法，显得代码过于紧凑</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBUGtwNC5wbmc?x-oss-process=image/format,png" alt="eAPkp4.png"></p><p><strong>例 5：规范的写法</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBaWN4SC5wbmc?x-oss-process=image/format,png" alt="eAicxH.png"></p><p><strong>（8） 注释与所描述内容进行同样的缩排。</strong></p><p>说明：可使程序排版整齐，并方便注释的阅读与理解。<br><strong>例 1：如下例子，排版不整齐，阅读稍感不方便。</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBUFFoRC5wbmc?x-oss-process=image/format,png" alt="eAPQhD.png"></p><p><strong>例 2：正确的布局。</strong></p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBaVdxSS5wbmc?x-oss-process=image/format,png" alt="eAiWqI.png"></p><p><strong>（9） 对变量的定义和分支语句（条件分支、循环语句等）必须编写注释。</strong></p><p>说明：这些语句往往是程序实现某一特定功能的关键，对于维护人员来说，良好的注释帮助更好的理解程序，有时甚至优于看设计文档。</p><p><strong>（10） 对于 switch 语句下的 case 语句，如果因为特殊情况需要处理完一个 case 后进入下一个 case 处理，必须在该 case 语句处理完、下一个 case 语句前加上明确的注释。</strong></p><p>说明：这样比较清楚程序编写者的意图，有效防止无故遗漏 break 语句。</p><p><strong>示例（注意斜体加粗部分）：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBUHc0Uy5wbmc?x-oss-process=image/format,png" alt="eAPw4S.png"></p><p><strong>（11） 注释格式尽量统一，建议使用“&#x2F;* …… *&#x2F;”，因为 C++注释“&#x2F;&#x2F;”并不被所有 C 编译器支持。</strong></p><p><strong>（12） 注释应考虑程序易读及外观排版的因素，使用的语言若是中、英兼有的，建议多使用中文，除非能非常流利准确的用英文表达。</strong></p><p>说明：注释语言不统一，影响程序易读性和外观排版，出于对维护人员的考虑，建议使用中文。</p><p><strong>（13） 标识符的命名要清晰、明了，有明确含义，同时使用完整的单词或大家基本可以理解的缩写，避<br>免使人产生误解。</strong></p><p>说明：较短的单词可通过去掉“元音”形成缩写；较长的单词可取单词的头几个字母形成缩写；一些单词有大家公认的缩写。<br><strong>示例：如下单词的缩写能够被大家基本认可。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c">temp 可缩写为 tmp;<br>flag 可缩写为 flg;<br>statistic 可缩写为 stat;<br>increment 可缩写为 inc;<br>message 可缩写为 msg; <br></code></pre></td></tr></table></figure><p><strong>（14） 命名中若使用特殊约定或缩写，则要有注释说明。</strong><br>说明：应该在源文件的开始之处，对文件中所使用的缩写或约定，特别是特殊的缩写，进行必要的注释说明。</p><p><strong>（15） 自己特有的命名风格，要自始至终保持一致，不可来回变化。</strong><br>说明：个人的命名风格，在符合所在项目组或产品组的命名规则的前提下，才可使用。（即命名规则中没有规定到的地方才可有个人命名风格）</p><p><strong>（16） 对于变量命名，禁止取单个字符（如 i、j、k…）</strong></p><p>建议除了要有具体含义外，还能表明其变量类型、数据类型等，但 i、j、k 作局部循环变量是允许的。变量，尤其是局部变量，如果用单个字符表示，很容易敲错（如i写成j），而编译时又检查不出来，有可能为了这个小小的错误而花费大量的查错时间 。</p><p><strong>（17） 命名规范必须与所使用的系统风格保持一致，并在同一项目中统一</strong></p><p>比如采用 UNIX 的全小写加下划线的风格或大小写混排的方式，不要使用大小写与下划线混排的方式，用作特殊标识如标识成员变量或全局变量的 m_和 g_，其后加上大小写混排的方式是允许的。<br>示例： Add_User不允许，add_user、AddUser、m_AddUser允许。</p><p><strong>（18） 除非必要，不要用数字或较奇怪的字符来定义标识符。</strong><br>示例：如下命名，使人产生疑惑。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBaUNESS5wbmc?x-oss-process=image/format,png" alt="eAiCDI.png"></p><p>应改为有意义的单词命名：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBaVBidC5wbmc?x-oss-process=image/format,png" alt="eAiPbt.png"></p><h2 id="4、可读性"><a href="#4、可读性" class="headerlink" title="4、可读性"></a>4、可读性</h2><p><strong>（1） 注意运算符的优先级，并用括号明确表达式的操作顺序，避免使用默认优先级。</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBRlpvNi5wbmc?x-oss-process=image/format,png" alt="eAFZo6.png"></p><p><strong>（2） 避免使用不易理解的数字，用有意义的标识来替代。</strong></p><p>示例：如下的程序可读性差<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBbG94MS5wbmc?x-oss-process=image/format,png" alt="eAlox1.png"></p><p>应改为如下形式 ：</p><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBbHhHZC5wbmc?x-oss-process=image/format,png" alt="eAlxGd.png"></p><p><strong>（3） 不要使用难懂的技巧性很高的语句，除非很有必要时。</strong></p><p>说明：高技巧语句不等于高效率的程序，实际上程序的效率关键在于算法。<br>示例：如下表达式，考虑不周就可能出问题，也较难理解。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBbHpSQS5wbmc?x-oss-process=image/format,png" alt="eAlzRA.png"></p><p>应分别改为如下：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBMUNzUC5wbmc?x-oss-process=image/format,png" alt="eA1CsP.png"></p><h2 id="5、变量、-结构、-常量、-宏"><a href="#5、变量、-结构、-常量、-宏" class="headerlink" title="5、变量、 结构、 常量、 宏"></a>5、变量、 结构、 常量、 宏</h2><p><strong>（1） 为了方便书写及记忆，变量类型采用如下重定义：</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBMTFkVS5wbmc?x-oss-process=image/format,png" alt="eA11dU.png"></p><p><strong>（2） 常见类型的前缀</strong></p><ul><li>对于一些常见类型的变量，应在其名字前标注表示其类型的前缀。前缀用小写字母表示。前缀的使用请参照下列表格中说明。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBMUpKSi5wbmc?x-oss-process=image/format,png" alt="eA1JJJ.png"></li></ul><p><strong>（3） 变量作用域的前缀</strong></p><p>为了清晰的标识变量的作用域，减少发生命名冲突，应该在变量类型前缀之前再加上表示变量作用域的前缀，并在变量类型前缀和变量作用域前缀之间用下划线 <code>-</code> 隔开。</p><p>具体的规则如下：</p><ul><li>对于全局变量（global variable），在其名称前加<code>g</code>和变量类型符号前缀。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> g_ulParaWord;<br><span class="hljs-type">uint8_t</span> g_ucByte;<br></code></pre></td></tr></table></figure><ul><li>对于静态变量（static variable），在其名称前加<code>s</code>和变量类型符号前缀。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">static</span> <span class="hljs-type">uint32_t</span> s_ulParaWord;<br><span class="hljs-type">static</span> <span class="hljs-type">uint8_t</span> s_ucByte;<br></code></pre></td></tr></table></figure><ul><li>函数内部等局部变量前不加作用域前缀。</li><li>对于常量，当可能发生作用域和名字冲突问题时，以上几条规则对于常量同样适用。注意，虽然常量名的核心部分全部大写，但此时常量的前缀仍然用小写字母，以保持前缀的一致性。</li></ul><p><strong>（4） 结构体命名规则</strong></p><p>表示类型的名字，所有名字以小写字母<code>tag</code>开头，之后每个英文单词的第一个字母大写（包括第一个单词的第一个字母），其他字母小写，结尾<code>_T</code> 标识。单词之间不使用下划线分隔,结构体变量以 <code>t</code> 开头。 如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* 结构体命名类型名 */</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">tagBillQuery_T</span></span><br><span class="hljs-class">&#123;</span><br>...<br>&#125;BillQuery_T;<br><span class="hljs-comment">/* 结构体变量定义 */</span><br>BillQuery_T tBillQuery;<br></code></pre></td></tr></table></figure><p><strong>（5）对于枚举定义全部采用大写，结尾_E 标识。</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBMWptVi5wbmc?x-oss-process=image/format,png" alt="eA1jmV.png"></p><p><strong>（6）常量、宏、模版的名字应该全部大写。如果这些名字由多个单词组成，则单词之间用下划线分隔。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">define</span> LOG_BUF_SIZE 8000</span><br></code></pre></td></tr></table></figure><h2 id="6、函数"><a href="#6、函数" class="headerlink" title="6、函数"></a>6、函数</h2><p><strong>（1） 函数的命名规则。</strong></p><p>每一个函数名前缀需包含模块名，模块名为小写，与函数名区别开。</p><blockquote><p>如：uartReceive(串口接收)</p></blockquote><p>备注：对于非常简单的程序，可以不加模块名。</p><p><strong>（2）函数的形参。</strong></p><p>函数的的形参都以下划线_开头，已示与普通变量进行区分，对于没有形参为空的函数(void)括号紧跟函数后面。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">uint32_t</span> <span class="hljs-title function_">uartConvUartBaud</span><span class="hljs-params">(<span class="hljs-type">uint32_t</span> _ulBaud)</span><br>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>（3） 一个函数仅完成一件功能。</strong></p><p><strong>（4） 函数名应准确描述函数的功能，使用动宾词组为执行某操作的函数命名。</strong></p><p>说明：避免用含义不清的动词如<code>process</code>、<code>handle</code>等为函数命名，因为这些动词并没有说明要具体做什么。</p><p>示例：参照如下方式命名函数。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBM3RBUy5wbmc?x-oss-process=image/format,png" alt="eA3tAS.png"></p><p><strong>（5）避免设计五个以上参数函数，不使用的参数从接口中去掉。</strong></p><p>说明：目的减少函数间接口的复杂度，复杂的参数可以使用结构传递。</p><p><strong>（6）在调用函数填写参数时，应尽量减少没有必要的默认数据类型转换或强制数据类型转换。</strong><br>说明：因为数据类型转换或多或少存在危险。</p><p><strong>（7） 防止把没有关联的语句放到一个函数中。</strong></p><p>示例：如下函数就是一种随机内聚。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBOHREeC5wbmc?x-oss-process=image/format,png" alt="eA8tDx.png"></p><p>矩形的长、宽与点的坐标基本没有任何关系，故以上函数是随机内聚。应如下分为两个函数：<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9zMi5heDF4LmNvbS8yMDE5LzA3LzIzL2VBOGFWSy5wbmc?x-oss-process=image/format,png" alt="eA8aVK.png"></p>]]></content>
    
    
    <categories>
      
      <category>技术</category>
      
    </categories>
    
    
    <tags>
      
      <tag>项目课</tag>
      
      <tag>STM32</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/hello-world/"/>
    <url>/2022/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><span id="more"></span><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
